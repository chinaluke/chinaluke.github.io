<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>todo list</title>
    <url>/2023/08/09/todo_list/</url>
    <content><![CDATA[<p>待办事项</p>
<span id="more"></span>

<h1 id="todo-list"><a href="#todo-list" class="headerlink" title="todo list"></a>todo list</h1><h2 id="hexo-next"><a href="#hexo-next" class="headerlink" title="hexo&#x2F;next"></a>hexo&#x2F;next</h2><ul>
<li>完成google&#x2F;baidu sitemap</li>
<li>完善aboutme</li>
<li><del>添加头像</del></li>
</ul>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><ul>
<li>syslog</li>
<li>llvm&#x2F;clang</li>
<li>gn&#x2F;ninja</li>
<li>freertos支持模块化加载</li>
<li><del>使用python绘制任务燃尽图、缺陷收敛图</del></li>
</ul>
<h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2>]]></content>
      <categories>
        <category>todo_list</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python解析CVS表格绘制燃尽图和收敛图</title>
    <url>/2023/08/12/%E4%BD%BF%E7%94%A8python%E8%A7%A3%E6%9E%90CVS%E8%A1%A8%E6%A0%BC%E7%BB%98%E5%88%B6%E7%87%83%E5%B0%BD%E5%9B%BE%E5%92%8C%E6%94%B6%E6%95%9B%E5%9B%BE/</url>
    <content><![CDATA[<p>近期有个任务，是让部门的项目开发变得可视化，以便老板们能快速了解项目情况。</p>
<p>我这边主要是提供思路，从PMS系统中提取项目的任务以及缺陷情况，绘制成两张图——任务燃尽图（TR4）以及缺陷收敛图（TR5）。</p>
<p>当然这个开发任务最终还是公司IT部门承接，我主要是配合。</p>
<p>近期恰好学习了一些python的知识，心里想着python是否也能实现，于是就有了这批文章。</p>
<span id="more"></span>

<h1 id="任务燃尽图"><a href="#任务燃尽图" class="headerlink" title="任务燃尽图"></a>任务燃尽图</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>使用方法：</p>
<ul>
<li>task.cvs: 从pms特定项目中导出的任务cvs表格文件</li>
<li>task_id: 分析指定任务及其所有子任务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./xxx.py &lt;task.cvs&gt; &lt;task_id&gt;</span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">filename = sys.argv[<span class="number">1</span>]</span><br><span class="line">index = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_xticks</span>(<span class="params">min_date, max_date, delta_day</span>):</span><br><span class="line">    <span class="comment"># 创建日期数组</span></span><br><span class="line">    x_ticks = []</span><br><span class="line">    curr_date = min_date</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置日期间隔</span></span><br><span class="line">    delta = timedelta(days=delta_day)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> curr_date &lt;= max_date:</span><br><span class="line">        x_ticks.append(curr_date)</span><br><span class="line">        curr_date += delta</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_ticks</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_min_max_dates</span>(<span class="params">csv_data, column_index</span>):</span><br><span class="line">    dates = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csv_data:</span><br><span class="line">        date_str = row[column_index]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            date = datetime.strptime(date_str, <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()  <span class="comment"># 将日期字符串解析为 datetime 对象</span></span><br><span class="line">            dates.append(date)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    min_date = <span class="built_in">min</span>(dates) <span class="keyword">if</span> dates <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    max_date = <span class="built_in">max</span>(dates) <span class="keyword">if</span> dates <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> min_date, max_date</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_dates_before_3</span>(<span class="params">csv_data, column_index, min_date, max_date</span>):</span><br><span class="line">    date_counts = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    curr_date = min_date</span><br><span class="line">    <span class="keyword">while</span> curr_date &lt;= max_date:</span><br><span class="line">        date_counts[curr_date] = <span class="number">0</span></span><br><span class="line">        curr_date += timedelta(days=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csv_data:</span><br><span class="line">        date_str = row[column_index]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            date_obj = datetime.strptime(date_str, <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()</span><br><span class="line">            <span class="keyword">if</span> min_date &lt;= date_obj &lt;= max_date:</span><br><span class="line">                curr_date = date_obj</span><br><span class="line">                <span class="keyword">while</span> curr_date &gt;= min_date:</span><br><span class="line">                    date_counts[curr_date] += <span class="number">1</span></span><br><span class="line">                    curr_date -= timedelta(days=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            curr_date = max_date</span><br><span class="line">            <span class="keyword">while</span> curr_date &gt;= min_date:</span><br><span class="line">                date_counts[curr_date] += <span class="number">1</span></span><br><span class="line">                curr_date -= timedelta(days=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> date_counts</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_children</span>(<span class="params">csv_data, parent_index, c_col, p_col</span>):</span><br><span class="line">    children = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csv_data:</span><br><span class="line">        <span class="keyword">if</span> row[<span class="number">2</span>] == parent_index:</span><br><span class="line">            children.append(row)  <span class="comment"># 将子任务的索引添加到列表中</span></span><br><span class="line">            children.extend(find_children(csv_data, row[<span class="number">0</span>], c_col, p_col))  <span class="comment"># 递归查找子任务的子任务</span></span><br><span class="line">    <span class="keyword">return</span> children</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开原始CSV文件和新的CSV文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> csvfile, <span class="built_in">open</span>(filename+<span class="string">&quot;.sort&quot;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> sorted_csvfile:</span><br><span class="line">    <span class="comment"># 创建CSV读取器和写入器对象</span></span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line">    writer = csv.writer(sorted_csvfile)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取原始CSV文件中的数据</span></span><br><span class="line">    data = <span class="built_in">list</span>(reader)</span><br><span class="line"></span><br><span class="line">    writer.writerow(data[<span class="number">0</span>])</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 查找&quot;父任务&quot;,&quot;计划开始日期&quot;,&quot;计划完成日期&quot;所在的列索引</span></span><br><span class="line">    p_col = <span class="literal">None</span></span><br><span class="line">    s_col = <span class="literal">None</span></span><br><span class="line">    e_col = <span class="literal">None</span></span><br><span class="line">    l_col = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i, cell <span class="keyword">in</span> <span class="built_in">enumerate</span>(data[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;父任务&quot;</span>:</span><br><span class="line">            p_col = i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;计划开始日期&quot;</span>:</span><br><span class="line">            s_col = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;计划完成日期&quot;</span>:</span><br><span class="line">            e_col = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;实际完成时间&quot;</span>:</span><br><span class="line">            l_col = i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据第二列对数据进行排序</span></span><br><span class="line">    sorted_data = <span class="built_in">sorted</span>(data[<span class="number">1</span>:], key=<span class="keyword">lambda</span> row: row[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> sorted_data:</span><br><span class="line">        <span class="keyword">if</span> row[<span class="number">0</span>] == index:</span><br><span class="line">            writer.writerow(row)</span><br><span class="line">            real_min_date = datetime.strptime(row[s_col], <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()</span><br><span class="line">            <span class="comment">#real_min_date = row[s_col]</span></span><br><span class="line"></span><br><span class="line">    child_data = find_children(sorted_data, index, <span class="number">0</span>, p_col)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> child_data:</span><br><span class="line">        writer.writerow(child)</span><br><span class="line"></span><br><span class="line">    min_date, max_date = find_min_max_dates(child_data, e_col)</span><br><span class="line"></span><br><span class="line">    date_now = datetime.now().date()</span><br><span class="line">    date_counts_orig = count_dates_before_3(child_data, e_col, real_min_date, max_date)</span><br><span class="line">    real_date_counts_orig = count_dates_before_3(child_data, l_col, real_min_date, max_date)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 截止到今天</span></span><br><span class="line">    date_counts = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> date_counts_orig.items() <span class="keyword">if</span> k &lt; date_now&#125;</span><br><span class="line">    real_date_counts = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> real_date_counts_orig.items() <span class="keyword">if</span> k &lt; date_now&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画图</span></span><br><span class="line">    matplotlib.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">    matplotlib.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">    x = <span class="built_in">list</span>(date_counts.keys())</span><br><span class="line">    y = <span class="built_in">list</span>(date_counts.values())</span><br><span class="line"></span><br><span class="line">    x1 = <span class="built_in">list</span>(real_date_counts.keys())</span><br><span class="line">    y1 = <span class="built_in">list</span>(real_date_counts.values())</span><br><span class="line"></span><br><span class="line">    plt.plot(x, y, label=<span class="string">&#x27;预期剩余&#x27;</span>)</span><br><span class="line">    plt.plot(x1, y1, label=<span class="string">&#x27;实际剩余&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;任务个数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.title(<span class="string">&#x27;任务燃尽图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    x_ticks = get_xticks(min_date, date_now, <span class="number">15</span>)</span><br><span class="line">    num_list = mdates.date2num(x_ticks)</span><br><span class="line">    plt.xticks(num_list, [date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">for</span> date <span class="keyword">in</span> x_ticks])</span><br><span class="line"></span><br><span class="line">    y_ticks = np.arange(<span class="number">0</span>, <span class="number">280</span>, <span class="number">20</span>)</span><br><span class="line">    plt.yticks(y_ticks)</span><br><span class="line"></span><br><span class="line">    plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img data-src="/2023/08/12/%E4%BD%BF%E7%94%A8python%E8%A7%A3%E6%9E%90CVS%E8%A1%A8%E6%A0%BC%E7%BB%98%E5%88%B6%E7%87%83%E5%B0%BD%E5%9B%BE%E5%92%8C%E6%94%B6%E6%95%9B%E5%9B%BE/%E4%BB%BB%E5%8A%A1%E7%87%83%E5%B0%BD%E5%9B%BE.png" alt="任务燃尽图"></p>
<h1 id="缺陷收敛图"><a href="#缺陷收敛图" class="headerlink" title="缺陷收敛图"></a>缺陷收敛图</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>使用方法：</p>
<ul>
<li>issues.cvs: 从pms特定项目中导出的任务cvs表格文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./xxx.py &lt;issues.cvs&gt;</span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">filename = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_xticks</span>(<span class="params">min_date, max_date, delta_day</span>):</span><br><span class="line">    <span class="comment"># 设置日期间隔</span></span><br><span class="line">    delta = timedelta(days=delta_day)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成日期刻度</span></span><br><span class="line">    x_ticks = mdates.drange(min_date, max_date, delta)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x_ticks</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_min_max_dates</span>(<span class="params">csv_data, column_index</span>):</span><br><span class="line">    dates = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csv_data:</span><br><span class="line">        date_str_tmp = row[column_index]</span><br><span class="line">        date_str = date_str_tmp.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            date = datetime.strptime(date_str, <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()  <span class="comment"># 将日期字符串解析为 datetime 对象</span></span><br><span class="line">            dates.append(date)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    min_date = <span class="built_in">min</span>(dates) <span class="keyword">if</span> dates <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    max_date = <span class="built_in">max</span>(dates) <span class="keyword">if</span> dates <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> min_date, max_date</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_columns</span>(<span class="params">cvs_data, index1, index2, min_date, max_date</span>):</span><br><span class="line">    column1_data = []</span><br><span class="line">    column2_data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> cvs_data:</span><br><span class="line">        createtime_str = row[index1]</span><br><span class="line">        index1_str = createtime_str.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        column1_data.append(index1_str)</span><br><span class="line">        <span class="keyword">if</span> row[index2] != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            column2_data.append(row[index2])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 Counter 统计不同元素的个数</span></span><br><span class="line">    column1_counts = Counter(column1_data)</span><br><span class="line">    column2_counts = Counter(column2_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按日期从旧到新进行排序</span></span><br><span class="line">    sorted_column1_counts = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(column1_counts.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line">    sorted_column2_counts = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(column2_counts.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充不在日期范围内的日期，并将计数设置为0</span></span><br><span class="line">    current_date = min_date</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> current_date &lt;= max_date:</span><br><span class="line">        date_str = current_date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> date_str <span class="keyword">not</span> <span class="keyword">in</span> sorted_column1_counts:</span><br><span class="line">            sorted_column1_counts[date_str] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> date_str <span class="keyword">not</span> <span class="keyword">in</span> sorted_column2_counts:</span><br><span class="line">            sorted_column2_counts[date_str] = <span class="number">0</span></span><br><span class="line">        current_date += timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按日期从旧到新进行排序</span></span><br><span class="line">    sorted_c_counts = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(sorted_column1_counts.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line">    sorted_l_counts = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(sorted_column2_counts.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    current_date = min_date</span><br><span class="line">    sorted_c_counts_sum = &#123;&#125;</span><br><span class="line">    sorted_l_counts_sum = &#123;&#125;</span><br><span class="line">    count_c_sum = <span class="number">0</span></span><br><span class="line">    count_l_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_date &lt;= max_date:</span><br><span class="line">        date_str = current_date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">        count_c_sum += sorted_c_counts[date_str]</span><br><span class="line">        sorted_c_counts_sum[date_str] = count_c_sum</span><br><span class="line">        count_l_sum += sorted_l_counts[date_str]</span><br><span class="line">        sorted_l_counts_sum[date_str] = count_l_sum</span><br><span class="line">        current_date += timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sorted_c_counts, sorted_l_counts, sorted_c_counts_sum, sorted_l_counts_sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开原始CSV文件和新的CSV文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    <span class="comment"># 创建CSV读取器和写入器对象</span></span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取原始CSV文件中的数据</span></span><br><span class="line">    data = <span class="built_in">list</span>(reader)</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 查找&quot;#&quot;,&quot;创建时间&quot;,&quot;实际完成日期&quot;所在的列索引</span></span><br><span class="line">    i_col = <span class="literal">None</span></span><br><span class="line">    c_col = <span class="literal">None</span></span><br><span class="line">    l_col = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i, cell <span class="keyword">in</span> <span class="built_in">enumerate</span>(data[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;#&quot;</span>:</span><br><span class="line">            i_col = i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;创建时间&quot;</span>:</span><br><span class="line">            c_col = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;实际完成时间&quot;</span>:</span><br><span class="line">            l_col = i</span><br><span class="line"></span><br><span class="line">    min_date, fake_max_date = find_min_max_dates(data[<span class="number">1</span>:], c_col)</span><br><span class="line">    date_now = datetime.now().date()</span><br><span class="line">    max_date = date_now</span><br><span class="line"></span><br><span class="line">    c_counts, l_counts, c_counts_sum, l_counts_sum = count_columns(data[<span class="number">1</span>:], c_col, l_col, min_date, max_date)</span><br><span class="line"></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">    x = <span class="built_in">list</span>(c_counts.keys())</span><br><span class="line">    y = <span class="built_in">list</span>(c_counts.values())</span><br><span class="line"></span><br><span class="line">    x1 = <span class="built_in">list</span>(l_counts.keys())</span><br><span class="line">    y1 = <span class="built_in">list</span>(l_counts.values())</span><br><span class="line"></span><br><span class="line">    x2 = <span class="built_in">list</span>(c_counts_sum.keys())</span><br><span class="line">    y2 = <span class="built_in">list</span>(c_counts_sum.values())</span><br><span class="line"></span><br><span class="line">    x3 = <span class="built_in">list</span>(l_counts_sum.keys())</span><br><span class="line">    y3 = <span class="built_in">list</span>(l_counts_sum.values())</span><br><span class="line"></span><br><span class="line">    plt.plot(x, y, label=<span class="string">&#x27;每日新增&#x27;</span>)</span><br><span class="line">    plt.plot(x1, y1, label=<span class="string">&#x27;每日解决&#x27;</span>)</span><br><span class="line">    plt.plot(x2, y2, label=<span class="string">&#x27;累计新增&#x27;</span>)</span><br><span class="line">    plt.plot(x3, y3, label=<span class="string">&#x27;累计解决&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;缺陷个数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.title(<span class="string">&#x27;缺陷收敛图&#x27;</span>)</span><br><span class="line">    x_ticks = get_xticks(min_date, date_now, <span class="number">15</span>)</span><br><span class="line">    <span class="comment"># 将数值转换为日期对象</span></span><br><span class="line">    x_dates = [mdates.num2date(x) <span class="keyword">for</span> x <span class="keyword">in</span> x_ticks]</span><br><span class="line">    <span class="comment"># 将日期对象格式化为字符串</span></span><br><span class="line">    x_labels = [date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">for</span> date <span class="keyword">in</span> x_dates]</span><br><span class="line">    <span class="comment"># 设置 x 轴刻度为日期字符串</span></span><br><span class="line">    plt.xticks(x_labels, rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">    y_ticks = np.arange(<span class="number">0</span>, <span class="number">500</span>, <span class="number">20</span>)</span><br><span class="line">    plt.yticks(y_ticks)</span><br><span class="line"></span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p><img data-src="/2023/08/12/%E4%BD%BF%E7%94%A8python%E8%A7%A3%E6%9E%90CVS%E8%A1%A8%E6%A0%BC%E7%BB%98%E5%88%B6%E7%87%83%E5%B0%BD%E5%9B%BE%E5%92%8C%E6%94%B6%E6%95%9B%E5%9B%BE/%E7%BC%BA%E9%99%B7%E6%94%B6%E6%95%9B%E5%9B%BE.png" alt="缺陷收敛图"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
</search>
