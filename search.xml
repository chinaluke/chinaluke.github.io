<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux_log重定向添加时间戳</title>
    <url>/2023/08/15/Linux-log%E9%87%8D%E5%AE%9A%E5%90%91%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    <content><![CDATA[<p>执行Linux命令时，log重定向时在每行前面加入时间戳信息。</p>
<span id="more"></span>

<p>命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入时间戳，直接输出到控制台</span></span><br><span class="line">&lt;command&gt; | ts &quot;[%d-%m-%y] %H:%M:%.S&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入时间戳，输出到控制台，同时重定向到指定<span class="built_in">log</span></span></span><br><span class="line">&lt;command&gt; | ts &quot;[%d-%m-%y] %H:%M:%.S&quot; 2&gt;&amp;1|tee &lt;rel.log&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">log</span>输出到控制台，加入时间戳重定向到指定<span class="built_in">log</span></span></span><br><span class="line">&lt;command&gt; 2&gt;&amp;1|tee &gt;(ts &quot;[%d-%m-%y] %H:%M:%.S&quot; &gt; &lt;rel.log&gt;)</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>command: 运行的命令</li>
<li>rel.log: log重定向的文件</li>
</ul>
<p><strong>注：ts是timestamp的缩写，使用ts命令需要安装moreutils包。ts是一个脚本，也可以从已安装的机器中复制&#x2F;usr&#x2F;bin&#x2F;ts来使用。</strong></p>
<p>测试效果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> test.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">count=0</span><br><span class="line"></span><br><span class="line">while true; do</span><br><span class="line">        count=$((count+1))</span><br><span class="line">        echo &quot;count: $&#123;count&#125;&quot;</span><br><span class="line">        sleep 1</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./test.sh | ts <span class="string">&quot;[%y-%m-%d] %H:%M:%.S&quot;</span></span></span><br><span class="line">[23-08-15] 09:10:04.574804 count: 1</span><br><span class="line">[23-08-15] 09:10:05.558411 count: 2</span><br><span class="line">[23-08-15] 09:10:06.559441 count: 3</span><br><span class="line">^C</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./test.sh | ts <span class="string">&quot;[%y-%m-%d] %H:%M:%.S&quot;</span> 2&gt;&amp;1|<span class="built_in">tee</span> 1.<span class="built_in">log</span></span></span><br><span class="line">[23-08-15] 09:10:17.630634 count: 1</span><br><span class="line">[23-08-15] 09:10:18.613956 count: 2</span><br><span class="line">[23-08-15] 09:10:19.615041 count: 3</span><br><span class="line">^C</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> 1.<span class="built_in">log</span></span></span><br><span class="line">[23-08-15] 09:10:17.630634 count: 1</span><br><span class="line">[23-08-15] 09:10:18.613956 count: 2</span><br><span class="line">[23-08-15] 09:10:19.615041 count: 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./test.sh 2&gt;&amp;1|<span class="built_in">tee</span> &gt;(ts <span class="string">&quot;[%d-%m-%y] %H:%M:%.S&quot;</span> &gt; 2.<span class="built_in">log</span>)</span></span><br><span class="line">count: 1</span><br><span class="line">count: 2</span><br><span class="line">count: 3</span><br><span class="line">^C</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> 2.<span class="built_in">log</span></span></span><br><span class="line">[15-08-23] 09:10:28.792188 count: 1</span><br><span class="line">[15-08-23] 09:10:29.773346 count: 2</span><br><span class="line">[15-08-23] 09:10:30.774403 count: 3</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>buildroot中graph-build实操</title>
    <url>/2024/11/22/buildroot%E4%B8%ADgraph-build%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<p>又捡起buildroot了。</p>
<p>近期在做buildroot编译优化，阅读buildroot manual时发现个有意思的东西graph-build，准备实操下。</p>
<span id="more"></span>

<h1 id="graph-build官方说明"><a href="#graph-build官方说明" class="headerlink" title="graph-build官方说明"></a>graph-build官方说明</h1><p><a href="http://www.buildroot.net/downloads/manual/manual.html#_graphing_the_build_duration">Graphing the build duration</a></p>
<p>When the build of a system takes a long time, it is sometimes useful to be able to understand which packages are the longest to build, to see if anything can be done to speed up the build. In order to help such build time analysis, Buildroot collects the build time of each step of each package, and allows to generate graphs from this data.</p>
<p>To generate the build time graph after a build, run:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make graph-build</span><br></pre></td></tr></table></figure>

<p>This will generate a set of files in output&#x2F;graphs :</p>
<p>build.hist-build.pdf, a histogram of the build time for each package, ordered in the build order.<br>build.hist-duration.pdf, a histogram of the build time for each package, ordered by duration (longest first)<br>build.hist-name.pdf, a histogram of the build time for each package, order by package name.<br>build.pie-packages.pdf, a pie chart of the build time per package<br>build.pie-steps.pdf, a pie chart of the global time spent in each step of the packages build process.<br>This graph-build target requires the Python Matplotlib and Numpy libraries to be installed (python-matplotlib and python-numpy on most distributions), and also the argparse module if you’re using a Python version older than 2.7 (python-argparse on most distributions).</p>
<p>By default, the output format for the graph is PDF, but a different format can be selected using the BR2_GRAPH_OUT environment variable. The only other format supported is PNG:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BR2_GRAPH_OUT=png make graph-build</span><br></pre></td></tr></table></figure>

<p>简单来说，在构建完成buildroot之后，可以运行make graph-build生成一系列的编译过程中耗时图，主要有：</p>
<ul>
<li>build.hist-build.pdf：按构建顺序排序的每个软件包构建时间的直方图。</li>
<li>build.hist-duration.pdf：按持续时间排序（从最长开始）的每个软件包构建时间的直方图。</li>
<li>build.hist-name.pdf：按软件包名称排序的每个软件包构建时间的直方图。</li>
<li>build.pie-packages.pdf：每个软件包构建时间的饼图。</li>
<li>build.pie-steps.pdf：每个软件包构建过程中各步骤所占总时间的饼图。</li>
</ul>
<p>在实际运行时，还存在timeline的图。</p>
<ul>
<li>build.timeline.pdf：按照编译时间顺序显示整个编译过程的甘特图。</li>
</ul>
<h1 id="graph-build原理"><a href="#graph-build原理" class="headerlink" title="graph-build原理"></a>graph-build原理</h1><p>查看buildroot&#x2F;Makefile文件，可以看到就是使用support&#x2F;scripts&#x2F;graph-build-time对$(O)&#x2F;build&#x2F;build-time.log文件进行解析，生成各类图片。</p>
<figure class="highlight make"><table><tr><td class="code"><pre><span class="line"><span class="section">graph-build: <span class="variable">$(O)</span>/build/build-time.log</span></span><br><span class="line">	@install -d <span class="variable">$(GRAPHS_DIR)</span></span><br><span class="line">	<span class="variable">$(<span class="built_in">foreach</span> o,name build duration,./support/scripts/graph-build-time \</span></span><br><span class="line"><span class="variable">					--type=histogram --order=<span class="variable">$(o)</span> --input=$(&lt;)</span> \</span><br><span class="line">					--output=<span class="variable">$(GRAPHS_DIR)</span>/build.hist-<span class="variable">$(o)</span>.<span class="variable">$(BR_GRAPH_OUT)</span> \</span><br><span class="line">					<span class="variable">$(<span class="built_in">if</span> <span class="variable">$(BR2_GRAPH_ALT)</span>,--alternate-colors)</span><span class="variable">$(sep)</span>)</span><br><span class="line">	<span class="variable">$(<span class="built_in">foreach</span> t,packages steps,./support/scripts/graph-build-time \</span></span><br><span class="line"><span class="variable">				   --type=pie-<span class="variable">$(t)</span> --input=$(&lt;)</span> \</span><br><span class="line">				   --output=<span class="variable">$(GRAPHS_DIR)</span>/build.pie-<span class="variable">$(t)</span>.<span class="variable">$(BR_GRAPH_OUT)</span> \</span><br><span class="line">				   <span class="variable">$(<span class="built_in">if</span> <span class="variable">$(BR2_GRAPH_ALT)</span>,--alternate-colors)</span><span class="variable">$(sep)</span>)</span><br><span class="line">	./support/scripts/graph-build-time --type=timeline --input=$(&lt;) \</span><br><span class="line">		--output=<span class="variable">$(GRAPHS_DIR)</span>/build.timeline.<span class="variable">$(BR_GRAPH_OUT)</span> \</span><br><span class="line">		<span class="variable">$(<span class="built_in">if</span> <span class="variable">$(BR2_GRAPH_ALT)</span>,--alternate-colors)</span></span><br></pre></td></tr></table></figure>


<h1 id="安装python3依赖"><a href="#安装python3依赖" class="headerlink" title="安装python3依赖"></a>安装python3依赖</h1><p>使用graph-build需要python-matplotlib、python-numpy等python包。由于服务器是离线环境，这里提供一种whl的安装方式。</p>
<p>正常可以到python官网下载，这里使用清华源。</p>
<ul>
<li>进入<a href="https://pypi.tuna.tsinghua.edu.cn/simple/kiwisolver/">https://pypi.tuna.tsinghua.edu.cn/simple/kiwisolver/</a> ，将其中的kiwisolver换成对应的包名，并下载对应版本。</li>
<li>下载后whl后，使用pip3 install xxx.whl进行安装，默认安装到~&#x2F;.local&#x2F;bin下。</li>
<li>在<del>&#x2F;.bashrc中将</del>&#x2F;.local&#x2F;bin在加入到PATH环境变量中，执行source ~&#x2F;.bashrc生效。</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="title class_">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:/home/xxx/</span>.local/bin</span><br></pre></td></tr></table></figure>

<h1 id="graph-build输出"><a href="#graph-build输出" class="headerlink" title="graph-build输出"></a>graph-build输出</h1><h2 id="hist"><a href="#hist" class="headerlink" title="hist"></a>hist</h2><p>hist会列出每个包各个阶段的耗时，主要用于筛选出编译耗时长的包，针对这些包进行优化。</p>
<h3 id="hist-build"><a href="#hist-build" class="headerlink" title="hist-build"></a>hist-build</h3><p><img data-src="/2024/11/22/buildroot%E4%B8%ADgraph-build%E5%AE%9E%E6%93%8D/%E6%9E%84%E5%BB%BA%E9%A1%BA%E5%BA%8F%E7%9B%B4%E6%96%B9%E5%9B%BE.png" alt="构建顺序直方图"></p>
<h3 id="hist-duration"><a href="#hist-duration" class="headerlink" title="hist-duration"></a>hist-duration</h3><p><img data-src="/2024/11/22/buildroot%E4%B8%ADgraph-build%E5%AE%9E%E6%93%8D/%E8%80%97%E6%97%B6%E9%A1%BA%E5%BA%8F%E7%9B%B4%E6%96%B9%E5%9B%BE.png" alt="耗时顺序直方图"></p>
<h3 id="hist-name"><a href="#hist-name" class="headerlink" title="hist-name"></a>hist-name</h3><p><img data-src="/2024/11/22/buildroot%E4%B8%ADgraph-build%E5%AE%9E%E6%93%8D/%E5%8C%85%E5%90%8D%E9%A1%BA%E5%BA%8F%E7%9B%B4%E6%96%B9%E5%9B%BE.png" alt="包名顺序直方图"></p>
<h2 id="pie"><a href="#pie" class="headerlink" title="pie"></a>pie</h2><p>pie主要是用于统计目的。</p>
<h3 id="pie-packages"><a href="#pie-packages" class="headerlink" title="pie-packages"></a>pie-packages</h3><p><img data-src="/2024/11/22/buildroot%E4%B8%ADgraph-build%E5%AE%9E%E6%93%8D/%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%9E%84%E5%BB%BA%E8%80%97%E6%97%B6%E9%A5%BC%E5%9B%BE.png" alt="软件包构建耗时饼图"></p>
<h3 id="pie-steps"><a href="#pie-steps" class="headerlink" title="pie-steps"></a>pie-steps</h3><p><img data-src="/2024/11/22/buildroot%E4%B8%ADgraph-build%E5%AE%9E%E6%93%8D/%E6%80%BB%E6%9E%84%E5%BB%BA%E6%AD%A5%E9%AA%A4%E8%80%97%E6%97%B6%E9%A5%BC%E5%9B%BE.png" alt="总构建步骤耗时饼图"></p>
<h2 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h2><p>timeline主要是用于优化编译依赖的目的。</p>
<p><img data-src="/2024/11/22/buildroot%E4%B8%ADgraph-build%E5%AE%9E%E6%93%8D/%E6%9E%84%E5%BB%BA%E9%A1%BA%E5%BA%8F%E7%94%98%E7%89%B9%E5%9B%BE.png" alt="构建顺序甘特图"></p>
<h3 id="timeline输出优化"><a href="#timeline输出优化" class="headerlink" title="timeline输出优化"></a>timeline输出优化</h3><p>使用默认的脚本，生成的图片纵坐标label都重叠了，且很多耗时短的包都绘制了，看起来不清晰。</p>
<p>这里提供一个补丁，优化其输出。</p>
<figure class="highlight patch"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/support/scripts/graph-build-time b/support/scripts/graph-build-time</span></span><br><span class="line"><span class="comment">index 1edc3b3c..4c61f120 100755</span></span><br><span class="line"><span class="comment">--- a/support/scripts/graph-build-time</span></span><br><span class="line"><span class="comment">+++ b/support/scripts/graph-build-time</span></span><br><span class="line"><span class="meta">@@ -270,6 +270,10 @@</span> def pkg_timeline(data, output):</span><br><span class="line">     # give the proper dependency chain, but still provides a good-enough</span><br><span class="line">     # cascade graph.</span><br><span class="line">     for p in sorted(data, reverse=True, key=lambda x: x.steps_start[&#x27;configure&#x27;]):</span><br><span class="line"><span class="addition">+        # if configure + build time &lt; 4.0s, do not show in graph, to prevent the overlap of y-axis labels</span></span><br><span class="line"><span class="addition">+        if p.steps_end[&#x27;build&#x27;] - p.steps_start[&#x27;build&#x27;] + p.steps_end[&#x27;configure&#x27;] - p.steps_start[&#x27;configure&#x27;] &lt; 4.0:</span></span><br><span class="line"><span class="addition">+            continue</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">         durations = []</span><br><span class="line">         facecolors = []</span><br><span class="line">         for step in steps:</span><br><span class="line"><span class="meta">@@ -295,9 +299,10 @@</span> def pkg_timeline(data, output):</span><br><span class="line"> </span><br><span class="line">     plt.gcf().subplots_adjust(left=0.2)</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-    plt.tick_params(axis=&#x27;y&#x27;, which=&#x27;both&#x27;, labelsize=6)</span></span><br><span class="line"><span class="addition">+    # use small labelsize, to prevent the overlap of y-axis labels</span></span><br><span class="line"><span class="addition">+    plt.tick_params(axis=&#x27;y&#x27;, which=&#x27;both&#x27;, labelsize=2)</span></span><br><span class="line">     plt.title(&#x27;Timeline&#x27;)</span><br><span class="line"><span class="deletion">-    plt.savefig(output, dpi=300)</span></span><br><span class="line"><span class="addition">+    plt.savefig(output, dpi=1024)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> # Parses the csv file passed on standard input and returns a list of</span><br></pre></td></tr></table></figure>

<p><img data-src="/2024/11/22/buildroot%E4%B8%ADgraph-build%E5%AE%9E%E6%93%8D/%E6%9E%84%E5%BB%BA%E9%A1%BA%E5%BA%8F%E7%94%98%E7%89%B9%E5%9B%BE%E4%BC%98%E5%8C%96.png" alt="构建顺序甘特图优化"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>buildroot</tag>
        <tag>python</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>todo list</title>
    <url>/2023/08/09/todo_list/</url>
    <content><![CDATA[<p>待办事项</p>
<span id="more"></span>

<h1 id="todo-list"><a href="#todo-list" class="headerlink" title="todo list"></a>todo list</h1><h2 id="hexo-next"><a href="#hexo-next" class="headerlink" title="hexo&#x2F;next"></a>hexo&#x2F;next</h2><ul>
<li>完成google&#x2F;baidu sitemap</li>
<li>完善aboutme</li>
<li><del>添加头像</del></li>
</ul>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><ul>
<li>syslog</li>
<li>llvm&#x2F;clang</li>
<li>gn&#x2F;ninja</li>
<li>freertos支持模块化加载</li>
<li><del>使用python绘制任务燃尽图、缺陷收敛图</del></li>
</ul>
<h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2>]]></content>
      <categories>
        <category>todo_list</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python解析CVS表格绘制燃尽图和收敛图</title>
    <url>/2023/08/12/%E4%BD%BF%E7%94%A8python%E8%A7%A3%E6%9E%90CVS%E8%A1%A8%E6%A0%BC%E7%BB%98%E5%88%B6%E7%87%83%E5%B0%BD%E5%9B%BE%E5%92%8C%E6%94%B6%E6%95%9B%E5%9B%BE/</url>
    <content><![CDATA[<p>近期有个任务，是让部门的项目开发变得可视化，以便老板们能快速了解项目情况。</p>
<p>我这边主要是提供思路，从PMS系统中提取项目的任务以及缺陷情况，绘制成两张图——任务燃尽图（TR4）以及缺陷收敛图（TR5）。</p>
<p>当然这个开发任务最终还是公司IT部门承接，我主要是配合。</p>
<p>近期恰好学习了一些python的知识，心里想着python是否也能实现，于是就有了这篇文章。</p>
<span id="more"></span>

<h1 id="任务燃尽图"><a href="#任务燃尽图" class="headerlink" title="任务燃尽图"></a>任务燃尽图</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>使用方法：</p>
<ul>
<li>task.cvs: 从pms特定项目中导出的任务cvs表格文件</li>
<li>task_id: 分析指定任务及其所有子任务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./xxx.py &lt;task.cvs&gt; &lt;task_id&gt;</span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">filename = sys.argv[<span class="number">1</span>]</span><br><span class="line">index = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_xticks</span>(<span class="params">min_date, max_date, delta_day</span>):</span><br><span class="line">    <span class="comment"># 创建日期数组</span></span><br><span class="line">    x_ticks = []</span><br><span class="line">    curr_date = min_date</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置日期间隔</span></span><br><span class="line">    delta = timedelta(days=delta_day)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> curr_date &lt;= max_date:</span><br><span class="line">        x_ticks.append(curr_date)</span><br><span class="line">        curr_date += delta</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_ticks</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_min_max_dates</span>(<span class="params">csv_data, column_index</span>):</span><br><span class="line">    dates = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csv_data:</span><br><span class="line">        date_str = row[column_index]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            date = datetime.strptime(date_str, <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()  <span class="comment"># 将日期字符串解析为 datetime 对象</span></span><br><span class="line">            dates.append(date)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    min_date = <span class="built_in">min</span>(dates) <span class="keyword">if</span> dates <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    max_date = <span class="built_in">max</span>(dates) <span class="keyword">if</span> dates <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> min_date, max_date</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_dates_before_3</span>(<span class="params">csv_data, column_index, min_date, max_date</span>):</span><br><span class="line">    date_counts = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    curr_date = min_date</span><br><span class="line">    <span class="keyword">while</span> curr_date &lt;= max_date:</span><br><span class="line">        date_counts[curr_date] = <span class="number">0</span></span><br><span class="line">        curr_date += timedelta(days=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csv_data:</span><br><span class="line">        date_str = row[column_index]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            date_obj = datetime.strptime(date_str, <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()</span><br><span class="line">            <span class="keyword">if</span> min_date &lt;= date_obj &lt;= max_date:</span><br><span class="line">                curr_date = date_obj</span><br><span class="line">                <span class="keyword">while</span> curr_date &gt;= min_date:</span><br><span class="line">                    date_counts[curr_date] += <span class="number">1</span></span><br><span class="line">                    curr_date -= timedelta(days=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            curr_date = max_date</span><br><span class="line">            <span class="keyword">while</span> curr_date &gt;= min_date:</span><br><span class="line">                date_counts[curr_date] += <span class="number">1</span></span><br><span class="line">                curr_date -= timedelta(days=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> date_counts</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_children</span>(<span class="params">csv_data, parent_index, c_col, p_col</span>):</span><br><span class="line">    children = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csv_data:</span><br><span class="line">        <span class="keyword">if</span> row[<span class="number">2</span>] == parent_index:</span><br><span class="line">            children.append(row)  <span class="comment"># 将子任务的索引添加到列表中</span></span><br><span class="line">            children.extend(find_children(csv_data, row[<span class="number">0</span>], c_col, p_col))  <span class="comment"># 递归查找子任务的子任务</span></span><br><span class="line">    <span class="keyword">return</span> children</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开原始CSV文件和新的CSV文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> csvfile, <span class="built_in">open</span>(filename+<span class="string">&quot;.sort&quot;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> sorted_csvfile:</span><br><span class="line">    <span class="comment"># 创建CSV读取器和写入器对象</span></span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line">    writer = csv.writer(sorted_csvfile)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取原始CSV文件中的数据</span></span><br><span class="line">    data = <span class="built_in">list</span>(reader)</span><br><span class="line"></span><br><span class="line">    writer.writerow(data[<span class="number">0</span>])</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 查找&quot;父任务&quot;,&quot;计划开始日期&quot;,&quot;计划完成日期&quot;所在的列索引</span></span><br><span class="line">    p_col = <span class="literal">None</span></span><br><span class="line">    s_col = <span class="literal">None</span></span><br><span class="line">    e_col = <span class="literal">None</span></span><br><span class="line">    l_col = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i, cell <span class="keyword">in</span> <span class="built_in">enumerate</span>(data[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;父任务&quot;</span>:</span><br><span class="line">            p_col = i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;计划开始日期&quot;</span>:</span><br><span class="line">            s_col = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;计划完成日期&quot;</span>:</span><br><span class="line">            e_col = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;实际完成时间&quot;</span>:</span><br><span class="line">            l_col = i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据第二列对数据进行排序</span></span><br><span class="line">    sorted_data = <span class="built_in">sorted</span>(data[<span class="number">1</span>:], key=<span class="keyword">lambda</span> row: row[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> sorted_data:</span><br><span class="line">        <span class="keyword">if</span> row[<span class="number">0</span>] == index:</span><br><span class="line">            writer.writerow(row)</span><br><span class="line">            real_min_date = datetime.strptime(row[s_col], <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()</span><br><span class="line">            <span class="comment">#real_min_date = row[s_col]</span></span><br><span class="line"></span><br><span class="line">    child_data = find_children(sorted_data, index, <span class="number">0</span>, p_col)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> child_data:</span><br><span class="line">        writer.writerow(child)</span><br><span class="line"></span><br><span class="line">    min_date, max_date = find_min_max_dates(child_data, e_col)</span><br><span class="line"></span><br><span class="line">    date_now = datetime.now().date()</span><br><span class="line">    date_counts_orig = count_dates_before_3(child_data, e_col, real_min_date, max_date)</span><br><span class="line">    real_date_counts_orig = count_dates_before_3(child_data, l_col, real_min_date, max_date)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 截止到今天</span></span><br><span class="line">    date_counts = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> date_counts_orig.items() <span class="keyword">if</span> k &lt; date_now&#125;</span><br><span class="line">    real_date_counts = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> real_date_counts_orig.items() <span class="keyword">if</span> k &lt; date_now&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画图</span></span><br><span class="line">    matplotlib.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">    matplotlib.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">    x = <span class="built_in">list</span>(date_counts.keys())</span><br><span class="line">    y = <span class="built_in">list</span>(date_counts.values())</span><br><span class="line"></span><br><span class="line">    x1 = <span class="built_in">list</span>(real_date_counts.keys())</span><br><span class="line">    y1 = <span class="built_in">list</span>(real_date_counts.values())</span><br><span class="line"></span><br><span class="line">    plt.plot(x, y, label=<span class="string">&#x27;预期剩余&#x27;</span>)</span><br><span class="line">    plt.plot(x1, y1, label=<span class="string">&#x27;实际剩余&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;任务个数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.title(<span class="string">&#x27;任务燃尽图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    x_ticks = get_xticks(min_date, date_now, <span class="number">15</span>)</span><br><span class="line">    num_list = mdates.date2num(x_ticks)</span><br><span class="line">    plt.xticks(num_list, [date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">for</span> date <span class="keyword">in</span> x_ticks])</span><br><span class="line"></span><br><span class="line">    y_ticks = np.arange(<span class="number">0</span>, <span class="number">280</span>, <span class="number">20</span>)</span><br><span class="line">    plt.yticks(y_ticks)</span><br><span class="line"></span><br><span class="line">    plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img data-src="/2023/08/12/%E4%BD%BF%E7%94%A8python%E8%A7%A3%E6%9E%90CVS%E8%A1%A8%E6%A0%BC%E7%BB%98%E5%88%B6%E7%87%83%E5%B0%BD%E5%9B%BE%E5%92%8C%E6%94%B6%E6%95%9B%E5%9B%BE/%E4%BB%BB%E5%8A%A1%E7%87%83%E5%B0%BD%E5%9B%BE.png" alt="任务燃尽图"></p>
<h1 id="缺陷收敛图"><a href="#缺陷收敛图" class="headerlink" title="缺陷收敛图"></a>缺陷收敛图</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>使用方法：</p>
<ul>
<li>issues.cvs: 从pms特定项目中导出的任务cvs表格文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./xxx.py &lt;issues.cvs&gt;</span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">filename = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_xticks</span>(<span class="params">min_date, max_date, delta_day</span>):</span><br><span class="line">    <span class="comment"># 设置日期间隔</span></span><br><span class="line">    delta = timedelta(days=delta_day)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成日期刻度</span></span><br><span class="line">    x_ticks = mdates.drange(min_date, max_date, delta)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x_ticks</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_min_max_dates</span>(<span class="params">csv_data, column_index</span>):</span><br><span class="line">    dates = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csv_data:</span><br><span class="line">        date_str_tmp = row[column_index]</span><br><span class="line">        date_str = date_str_tmp.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            date = datetime.strptime(date_str, <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()  <span class="comment"># 将日期字符串解析为 datetime 对象</span></span><br><span class="line">            dates.append(date)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    min_date = <span class="built_in">min</span>(dates) <span class="keyword">if</span> dates <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    max_date = <span class="built_in">max</span>(dates) <span class="keyword">if</span> dates <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> min_date, max_date</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_columns</span>(<span class="params">cvs_data, index1, index2, min_date, max_date</span>):</span><br><span class="line">    column1_data = []</span><br><span class="line">    column2_data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> cvs_data:</span><br><span class="line">        createtime_str = row[index1]</span><br><span class="line">        index1_str = createtime_str.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        column1_data.append(index1_str)</span><br><span class="line">        <span class="keyword">if</span> row[index2] != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            column2_data.append(row[index2])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 Counter 统计不同元素的个数</span></span><br><span class="line">    column1_counts = Counter(column1_data)</span><br><span class="line">    column2_counts = Counter(column2_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按日期从旧到新进行排序</span></span><br><span class="line">    sorted_column1_counts = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(column1_counts.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line">    sorted_column2_counts = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(column2_counts.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充不在日期范围内的日期，并将计数设置为0</span></span><br><span class="line">    current_date = min_date</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> current_date &lt;= max_date:</span><br><span class="line">        date_str = current_date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> date_str <span class="keyword">not</span> <span class="keyword">in</span> sorted_column1_counts:</span><br><span class="line">            sorted_column1_counts[date_str] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> date_str <span class="keyword">not</span> <span class="keyword">in</span> sorted_column2_counts:</span><br><span class="line">            sorted_column2_counts[date_str] = <span class="number">0</span></span><br><span class="line">        current_date += timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按日期从旧到新进行排序</span></span><br><span class="line">    sorted_c_counts = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(sorted_column1_counts.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line">    sorted_l_counts = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(sorted_column2_counts.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    current_date = min_date</span><br><span class="line">    sorted_c_counts_sum = &#123;&#125;</span><br><span class="line">    sorted_l_counts_sum = &#123;&#125;</span><br><span class="line">    count_c_sum = <span class="number">0</span></span><br><span class="line">    count_l_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_date &lt;= max_date:</span><br><span class="line">        date_str = current_date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">        count_c_sum += sorted_c_counts[date_str]</span><br><span class="line">        sorted_c_counts_sum[date_str] = count_c_sum</span><br><span class="line">        count_l_sum += sorted_l_counts[date_str]</span><br><span class="line">        sorted_l_counts_sum[date_str] = count_l_sum</span><br><span class="line">        current_date += timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sorted_c_counts, sorted_l_counts, sorted_c_counts_sum, sorted_l_counts_sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开原始CSV文件和新的CSV文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    <span class="comment"># 创建CSV读取器和写入器对象</span></span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取原始CSV文件中的数据</span></span><br><span class="line">    data = <span class="built_in">list</span>(reader)</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 查找&quot;#&quot;,&quot;创建时间&quot;,&quot;实际完成日期&quot;所在的列索引</span></span><br><span class="line">    i_col = <span class="literal">None</span></span><br><span class="line">    c_col = <span class="literal">None</span></span><br><span class="line">    l_col = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i, cell <span class="keyword">in</span> <span class="built_in">enumerate</span>(data[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;#&quot;</span>:</span><br><span class="line">            i_col = i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;创建时间&quot;</span>:</span><br><span class="line">            c_col = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cell == <span class="string">&quot;实际完成时间&quot;</span>:</span><br><span class="line">            l_col = i</span><br><span class="line"></span><br><span class="line">    min_date, fake_max_date = find_min_max_dates(data[<span class="number">1</span>:], c_col)</span><br><span class="line">    date_now = datetime.now().date()</span><br><span class="line">    max_date = date_now</span><br><span class="line"></span><br><span class="line">    c_counts, l_counts, c_counts_sum, l_counts_sum = count_columns(data[<span class="number">1</span>:], c_col, l_col, min_date, max_date)</span><br><span class="line"></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">    x = <span class="built_in">list</span>(c_counts.keys())</span><br><span class="line">    y = <span class="built_in">list</span>(c_counts.values())</span><br><span class="line"></span><br><span class="line">    x1 = <span class="built_in">list</span>(l_counts.keys())</span><br><span class="line">    y1 = <span class="built_in">list</span>(l_counts.values())</span><br><span class="line"></span><br><span class="line">    x2 = <span class="built_in">list</span>(c_counts_sum.keys())</span><br><span class="line">    y2 = <span class="built_in">list</span>(c_counts_sum.values())</span><br><span class="line"></span><br><span class="line">    x3 = <span class="built_in">list</span>(l_counts_sum.keys())</span><br><span class="line">    y3 = <span class="built_in">list</span>(l_counts_sum.values())</span><br><span class="line"></span><br><span class="line">    plt.plot(x, y, label=<span class="string">&#x27;每日新增&#x27;</span>)</span><br><span class="line">    plt.plot(x1, y1, label=<span class="string">&#x27;每日解决&#x27;</span>)</span><br><span class="line">    plt.plot(x2, y2, label=<span class="string">&#x27;累计新增&#x27;</span>)</span><br><span class="line">    plt.plot(x3, y3, label=<span class="string">&#x27;累计解决&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;缺陷个数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.title(<span class="string">&#x27;缺陷收敛图&#x27;</span>)</span><br><span class="line">    x_ticks = get_xticks(min_date, date_now, <span class="number">15</span>)</span><br><span class="line">    <span class="comment"># 将数值转换为日期对象</span></span><br><span class="line">    x_dates = [mdates.num2date(x) <span class="keyword">for</span> x <span class="keyword">in</span> x_ticks]</span><br><span class="line">    <span class="comment"># 将日期对象格式化为字符串</span></span><br><span class="line">    x_labels = [date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">for</span> date <span class="keyword">in</span> x_dates]</span><br><span class="line">    <span class="comment"># 设置 x 轴刻度为日期字符串</span></span><br><span class="line">    plt.xticks(x_labels, rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">    y_ticks = np.arange(<span class="number">0</span>, <span class="number">500</span>, <span class="number">20</span>)</span><br><span class="line">    plt.yticks(y_ticks)</span><br><span class="line"></span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p><img data-src="/2023/08/12/%E4%BD%BF%E7%94%A8python%E8%A7%A3%E6%9E%90CVS%E8%A1%A8%E6%A0%BC%E7%BB%98%E5%88%B6%E7%87%83%E5%B0%BD%E5%9B%BE%E5%92%8C%E6%94%B6%E6%95%9B%E5%9B%BE/%E7%BC%BA%E9%99%B7%E6%94%B6%E6%95%9B%E5%9B%BE.png" alt="缺陷收敛图"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
</search>
